$(document).ready(function() {
    $(document).on('click', '.js-statistic-clear-table', function() {
        $('.simulator-statistic-tries-table input.to_clear').val(0);
        $('.simulator-statistic-tries-table td.to_clear').html(0);
    });
});

function change_simulator_materials(array, plus, group = 0, reduce_items = {}){
    var materials = array.materials;
    var items = array.items;

    $('.upgrade_materials .upgrade_material').each(function(){
        if (plus >= 0 && plus < materials.length){
            var slot = $(this).index();

            if (plus in materials && slot in materials[plus]){
                var arr_item = materials[plus][slot][group];
                if (typeof arr_item === 'undefined'){
                    arr_item = materials[plus][slot][0];
                }
    
                if (typeof arr_item !== 'undefined'){
                    var item_id = Object.keys(arr_item)[0];
                    $(this).find('.js-create-material img').attr('src', items[item_id].icon);
                    $(this).find('.js-create-material').attr('href', items[item_id].url);
                    $(this).find('.js-create-material').attr('data-id', item_id);
                    $(this).find('.js-create-material').attr('data-name', items[item_id].hover_name);

                    var amount = Number(arr_item[item_id]);
                    if (item_id in reduce_items){
                        amount *= (100 - reduce_items[item_id]) / 100;
                    }

                    $(this).find('.js-create-material').attr('data-material-quantity', amount);
                    $(this).find('.material_amount').html(formatNumber(amount));
                    $(this).find('.js-create-material').show();
                    $(this).show();
                } else {
                    $(this).find('.js-create-material').hide();
                    $(this).hide();
                }
            } else {
                $(this).find('.js-create-material').hide();
                $(this).hide();
            }
        } else {
            $(this).find('.js-create-material').hide();
            $(this).show();
            $(this).find('.material_amount').html('-');
        }
    });
}

function change_simulator_chances(array, plus){
    $('.upgrade_chances .upgrade_chance').each(function(){
        if (plus >= 0 && plus < array.length){
            var slot = $('.upgrade_chances .upgrade_chance').index($(this));
            $(this).html(array[plus][slot]);
            
        } else {
            $(this).html('-');
        }
    });
}


function singleUpgrade(plus, event_percent = 0){
    event_percent = Math.round(event_percent);
    if (event_percent < 0){ event_percent = 0; }

    var rand = getRandom(0, 999999999) / 10000000;
    
    var check_rand = 0;
    for(var state = 0; state < simulator_chances[plus].length; state++){
        var percent = simulator_chances[plus][state];

        check_rand += percent;
        if (state == 0 && event_percent){
            check_rand += percent * event_percent / 100;
        }


        if (rand < check_rand){
            return state;
        }
    }

    return 2;
}

function includesAny(array, values){
    return array.some(el => values.includes(el))
}

function inputValue(input, max = null, min = null){
    if (max === null && input.attr('data-max') !== undefined){
        max = Number(input.attr('data-max'));
    }

    if (min === null && input.attr('data-min') !== undefined){
        min = Number(input.attr('data-min'));
    }

    var value = Number(input.val());
    if (max !== null && value > max){
        value = max;
    } else if (min !== null && value < min){
        value = min;
    } else if (min === null && value < 0){
        value = 0;
    }

    input.val(value);
    return value;
}

//use only to 0-255 numbers!!!
//convert -2 to 254, 2 to 2
function byteValue(number){
    var binary = (number >>> 0).toString(2);
    var byte = binary.substr(binary.length - 8);
    return parseInt(byte, 2);
}